"use strict";var test=require("tape");var qs=require("../");var utils=require("../lib/utils");var iconv=require("iconv-lite");test("parse()",function(a){a.test("parses a simple string",function(b){b.deepEqual(qs.parse("0=foo"),{0:"foo"});b.deepEqual(qs.parse("foo=c++"),{foo:"c  "});b.deepEqual(qs.parse("a[>=]=23"),{a:{">=":"23"}});b.deepEqual(qs.parse("a[<=>]==23"),{a:{"<=>":"=23"}});b.deepEqual(qs.parse("a[==]=23"),{a:{"==":"23"}});b.deepEqual(qs.parse("foo",{strictNullHandling:true}),{foo:null});b.deepEqual(qs.parse("foo"),{foo:""});b.deepEqual(qs.parse("foo="),{foo:""});b.deepEqual(qs.parse("foo=bar"),{foo:"bar"});b.deepEqual(qs.parse(" foo = bar = baz "),{" foo ":" bar = baz "});b.deepEqual(qs.parse("foo=bar=baz"),{foo:"bar=baz"});b.deepEqual(qs.parse("foo=bar&bar=baz"),{foo:"bar",bar:"baz"});b.deepEqual(qs.parse("foo2=bar2&baz2="),{foo2:"bar2",baz2:""});b.deepEqual(qs.parse("foo=bar&baz",{strictNullHandling:true}),{foo:"bar",baz:null});b.deepEqual(qs.parse("foo=bar&baz"),{foo:"bar",baz:""});b.deepEqual(qs.parse("cht=p3&chd=t:60,40&chs=250x100&chl=Hello|World"),{cht:"p3",chd:"t:60,40",chs:"250x100",chl:"Hello|World"});b.end()});a.test("allows enabling dot notation",function(b){b.deepEqual(qs.parse("a.b=c"),{"a.b":"c"});b.deepEqual(qs.parse("a.b=c",{allowDots:true}),{a:{b:"c"}});b.end()});a.deepEqual(qs.parse("a[b]=c"),{a:{b:"c"}},"parses a single nested string");a.deepEqual(qs.parse("a[b][c]=d"),{a:{b:{c:"d"}}},"parses a double nested string");a.deepEqual(qs.parse("a[b][c][d][e][f][g][h]=i"),{a:{b:{c:{d:{e:{f:{"[g][h]":"i"}}}}}}},"defaults to a depth of 5");a.test("only parses one level when depth = 1",function(b){b.deepEqual(qs.parse("a[b][c]=d",{depth:1}),{a:{b:{"[c]":"d"}}});b.deepEqual(qs.parse("a[b][c][d]=e",{depth:1}),{a:{b:{"[c][d]":"e"}}});b.end()});a.deepEqual(qs.parse("a=b&a=c"),{a:["b","c"]},"parses a simple array");a.test("parses an explicit array",function(b){b.deepEqual(qs.parse("a[]=b"),{a:["b"]});b.deepEqual(qs.parse("a[]=b&a[]=c"),{a:["b","c"]});b.deepEqual(qs.parse("a[]=b&a[]=c&a[]=d"),{a:["b","c","d"]});b.end()});a.test("parses a mix of simple and explicit arrays",function(b){b.deepEqual(qs.parse("a=b&a[]=c"),{a:["b","c"]});b.deepEqual(qs.parse("a[]=b&a=c"),{a:["b","c"]});b.deepEqual(qs.parse("a[0]=b&a=c"),{a:["b","c"]});b.deepEqual(qs.parse("a=b&a[0]=c"),{a:["b","c"]});b.deepEqual(qs.parse("a[1]=b&a=c",{arrayLimit:20}),{a:["b","c"]});b.deepEqual(qs.parse("a[]=b&a=c",{arrayLimit:0}),{a:["b","c"]});b.deepEqual(qs.parse("a[]=b&a=c"),{a:["b","c"]});b.deepEqual(qs.parse("a=b&a[1]=c",{arrayLimit:20}),{a:["b","c"]});b.deepEqual(qs.parse("a=b&a[]=c",{arrayLimit:0}),{a:["b","c"]});b.deepEqual(qs.parse("a=b&a[]=c"),{a:["b","c"]});b.end()});a.test("parses a nested array",function(b){b.deepEqual(qs.parse("a[b][]=c&a[b][]=d"),{a:{b:["c","d"]}});b.deepEqual(qs.parse("a[>=]=25"),{a:{">=":"25"}});b.end()});a.test("allows to specify array indices",function(b){b.deepEqual(qs.parse("a[1]=c&a[0]=b&a[2]=d"),{a:["b","c","d"]});b.deepEqual(qs.parse("a[1]=c&a[0]=b"),{a:["b","c"]});b.deepEqual(qs.parse("a[1]=c",{arrayLimit:20}),{a:["c"]});b.deepEqual(qs.parse("a[1]=c",{arrayLimit:0}),{a:{1:"c"}});b.deepEqual(qs.parse("a[1]=c"),{a:["c"]});b.end()});a.test("limits specific array indices to arrayLimit",function(b){b.deepEqual(qs.parse("a[20]=a",{arrayLimit:20}),{a:["a"]});b.deepEqual(qs.parse("a[21]=a",{arrayLimit:20}),{a:{21:"a"}});b.end()});a.deepEqual(qs.parse("a[12b]=c"),{a:{"12b":"c"}},"supports keys that begin with a number");a.test("supports encoded = signs",function(b){b.deepEqual(qs.parse("he%3Dllo=th%3Dere"),{"he=llo":"th=ere"});b.end()});a.test("is ok with url encoded strings",function(b){b.deepEqual(qs.parse("a[b%20c]=d"),{a:{"b c":"d"}});b.deepEqual(qs.parse("a[b]=c%20d"),{a:{b:"c d"}});b.end()});a.test("allows brackets in the value",function(b){b.deepEqual(qs.parse('pets=["tobi"]'),{pets:'["tobi"]'});b.deepEqual(qs.parse('operators=[">=", "<="]'),{operators:'[">=", "<="]'});b.end()});a.test("allows empty values",function(b){b.deepEqual(qs.parse(""),{});b.deepEqual(qs.parse(null),{});b.deepEqual(qs.parse(undefined),{});b.end()});a.test("transforms arrays to objects",function(b){b.deepEqual(qs.parse("foo[0]=bar&foo[bad]=baz"),{foo:{0:"bar",bad:"baz"}});b.deepEqual(qs.parse("foo[bad]=baz&foo[0]=bar"),{foo:{bad:"baz",0:"bar"}});b.deepEqual(qs.parse("foo[bad]=baz&foo[]=bar"),{foo:{bad:"baz",0:"bar"}});b.deepEqual(qs.parse("foo[]=bar&foo[bad]=baz"),{foo:{0:"bar",bad:"baz"}});b.deepEqual(qs.parse("foo[bad]=baz&foo[]=bar&foo[]=foo"),{foo:{bad:"baz",0:"bar",1:"foo"}});b.deepEqual(qs.parse("foo[0][a]=a&foo[0][b]=b&foo[1][a]=aa&foo[1][b]=bb"),{foo:[{a:"a",b:"b"},{a:"aa",b:"bb"}]});b.deepEqual(qs.parse("a[]=b&a[t]=u&a[hasOwnProperty]=c",{allowPrototypes:false}),{a:{0:"b",t:"u"}});b.deepEqual(qs.parse("a[]=b&a[t]=u&a[hasOwnProperty]=c",{allowPrototypes:true}),{a:{0:"b",t:"u",hasOwnProperty:"c"}});b.deepEqual(qs.parse("a[]=b&a[hasOwnProperty]=c&a[x]=y",{allowPrototypes:false}),{a:{0:"b",x:"y"}});b.deepEqual(qs.parse("a[]=b&a[hasOwnProperty]=c&a[x]=y",{allowPrototypes:true}),{a:{0:"b",hasOwnProperty:"c",x:"y"}});b.end()});a.test("transforms arrays to objects (dot notation)",function(b){b.deepEqual(qs.parse("foo[0].baz=bar&fool.bad=baz",{allowDots:true}),{foo:[{baz:"bar"}],fool:{bad:"baz"}});b.deepEqual(qs.parse("foo[0].baz=bar&fool.bad.boo=baz",{allowDots:true}),{foo:[{baz:"bar"}],fool:{bad:{boo:"baz"}}});b.deepEqual(qs.parse("foo[0][0].baz=bar&fool.bad=baz",{allowDots:true}),{foo:[[{baz:"bar"}]],fool:{bad:"baz"}});b.deepEqual(qs.parse("foo[0].baz[0]=15&foo[0].bar=2",{allowDots:true}),{foo:[{baz:["15"],bar:"2"}]});b.deepEqual(qs.parse("foo[0].baz[0]=15&foo[0].baz[1]=16&foo[0].bar=2",{allowDots:true}),{foo:[{baz:["15","16"],bar:"2"}]});b.deepEqual(qs.parse("foo.bad=baz&foo[0]=bar",{allowDots:true}),{foo:{bad:"baz",0:"bar"}});b.deepEqual(qs.parse("foo.bad=baz&foo[]=bar",{allowDots:true}),{foo:{bad:"baz",0:"bar"}});b.deepEqual(qs.parse("foo[]=bar&foo.bad=baz",{allowDots:true}),{foo:{0:"bar",bad:"baz"}});b.deepEqual(qs.parse("foo.bad=baz&foo[]=bar&foo[]=foo",{allowDots:true}),{foo:{bad:"baz",0:"bar",1:"foo"}});b.deepEqual(qs.parse("foo[0].a=a&foo[0].b=b&foo[1].a=aa&foo[1].b=bb",{allowDots:true}),{foo:[{a:"a",b:"b"},{a:"aa",b:"bb"}]});b.end()});a.test("correctly prunes undefined values when converting an array to an object",function(b){b.deepEqual(qs.parse("a[2]=b&a[99999999]=c"),{a:{2:"b",99999999:"c"}});b.end()});a.test("supports malformed uri characters",function(b){b.deepEqual(qs.parse("{%:%}",{strictNullHandling:true}),{"{%:%}":null});b.deepEqual(qs.parse("{%:%}="),{"{%:%}":""});b.deepEqual(qs.parse("foo=%:%}"),{foo:"%:%}"});b.end()});a.test("doesn't produce empty keys",function(b){b.deepEqual(qs.parse("_r=1&"),{_r:"1"});b.end()});a.test("cannot access Object prototype",function(b){qs.parse("constructor[prototype][bad]=bad");qs.parse("bad[constructor][prototype][bad]=bad");b.equal(typeof Object.prototype.bad,"undefined");b.end()});a.test("parses arrays of objects",function(b){b.deepEqual(qs.parse("a[][b]=c"),{a:[{b:"c"}]});b.deepEqual(qs.parse("a[0][b]=c"),{a:[{b:"c"}]});b.end()});a.test("allows for empty strings in arrays",function(b){b.deepEqual(qs.parse("a[]=b&a[]=&a[]=c"),{a:["b","","c"]});b.deepEqual(qs.parse("a[0]=b&a[1]&a[2]=c&a[19]=",{strictNullHandling:true,arrayLimit:20}),{a:["b",null,"c",""]},"with arrayLimit 20 + array indices: null then empty string works");b.deepEqual(qs.parse("a[]=b&a[]&a[]=c&a[]=",{strictNullHandling:true,arrayLimit:0}),{a:["b",null,"c",""]},"with arrayLimit 0 + array brackets: null then empty string works");b.deepEqual(qs.parse("a[0]=b&a[1]=&a[2]=c&a[19]",{strictNullHandling:true,arrayLimit:20}),{a:["b","","c",null]},"with arrayLimit 20 + array indices: empty string then null works");b.deepEqual(qs.parse("a[]=b&a[]=&a[]=c&a[]",{strictNullHandling:true,arrayLimit:0}),{a:["b","","c",null]},"with arrayLimit 0 + array brackets: empty string then null works");b.deepEqual(qs.parse("a[]=&a[]=b&a[]=c"),{a:["","b","c"]},"array brackets: empty strings work");b.end()});a.test("compacts sparse arrays",function(b){b.deepEqual(qs.parse("a[10]=1&a[2]=2",{arrayLimit:20}),{a:["2","1"]});b.deepEqual(qs.parse("a[1][b][2][c]=1",{arrayLimit:20}),{a:[{b:[{c:"1"}]}]});b.deepEqual(qs.parse("a[1][2][3][c]=1",{arrayLimit:20}),{a:[[[{c:"1"}]]]});b.deepEqual(qs.parse("a[1][2][3][c][1]=1",{arrayLimit:20}),{a:[[[{c:["1"]}]]]});b.end()});a.test("parses semi-parsed strings",function(b){b.deepEqual(qs.parse({"a[b]":"c"}),{a:{b:"c"}});b.deepEqual(qs.parse({"a[b]":"c","a[d]":"e"}),{a:{b:"c",d:"e"}});b.end()});a.test("parses buffers correctly",function(d){var c=new Buffer("test");d.deepEqual(qs.parse({a:c}),{a:c});d.end()});a.test("continues parsing when no parent is found",function(b){b.deepEqual(qs.parse("[]=&a=b"),{0:"",a:"b"});b.deepEqual(qs.parse("[]&a=b",{strictNullHandling:true}),{0:null,a:"b"});b.deepEqual(qs.parse("[foo]=bar"),{foo:"bar"});b.end()});a.test("does not error when parsing a very long array",function(b){var c="a[]=a";while(Buffer.byteLength(c)<128*1024){c=c+"&"+c}b.doesNotThrow(function(){qs.parse(c)});b.end()});a.test("should not throw when a native prototype has an enumerable property",{parallel:false},function(b){Object.prototype.crash="";Array.prototype.crash="";b.doesNotThrow(qs.parse.bind(null,"a=b"));b.deepEqual(qs.parse("a=b"),{a:"b"});b.doesNotThrow(qs.parse.bind(null,"a[][b]=c"));b.deepEqual(qs.parse("a[][b]=c"),{a:[{b:"c"}]});delete Object.prototype.crash;delete Array.prototype.crash;b.end()});a.test("parses a string with an alternative string delimiter",function(b){b.deepEqual(qs.parse("a=b;c=d",{delimiter:";"}),{a:"b",c:"d"});b.end()});a.test("parses a string with an alternative RegExp delimiter",function(b){b.deepEqual(qs.parse("a=b; c=d",{delimiter:/[;,] */}),{a:"b",c:"d"});b.end()});a.test("does not use non-splittable objects as delimiters",function(b){b.deepEqual(qs.parse("a=b&c=d",{delimiter:true}),{a:"b",c:"d"});b.end()});a.test("allows overriding parameter limit",function(b){b.deepEqual(qs.parse("a=b&c=d",{parameterLimit:1}),{a:"b"});b.end()});a.test("allows setting the parameter limit to Infinity",function(b){b.deepEqual(qs.parse("a=b&c=d",{parameterLimit:Infinity}),{a:"b",c:"d"});b.end()});a.test("allows overriding array limit",function(b){b.deepEqual(qs.parse("a[0]=b",{arrayLimit:-1}),{a:{0:"b"}});b.deepEqual(qs.parse("a[-1]=b",{arrayLimit:-1}),{a:{"-1":"b"}});b.deepEqual(qs.parse("a[0]=b&a[1]=c",{arrayLimit:0}),{a:{0:"b",1:"c"}});b.end()});a.test("allows disabling array parsing",function(b){b.deepEqual(qs.parse("a[0]=b&a[1]=c",{parseArrays:false}),{a:{0:"b",1:"c"}});b.end()});a.test("allows for query string prefix",function(b){b.deepEqual(qs.parse("?foo=bar",{ignoreQueryPrefix:true}),{foo:"bar"});b.deepEqual(qs.parse("foo=bar",{ignoreQueryPrefix:true}),{foo:"bar"});b.deepEqual(qs.parse("?foo=bar",{ignoreQueryPrefix:false}),{"?foo":"bar"});b.end()});a.test("parses an object",function(d){var c={"user[name]":{"pop[bob]":3},"user[email]":null};var e={user:{name:{"pop[bob]":3},email:null}};var b=qs.parse(c);d.deepEqual(b,e);d.end()});a.test("parses an object in dot notation",function(d){var c={"user.name":{"pop[bob]":3},"user.email.":null};var e={user:{name:{"pop[bob]":3},email:null}};var b=qs.parse(c,{allowDots:true});d.deepEqual(b,e);d.end()});a.test("parses an object and not child values",function(d){var c={"user[name]":{"pop[bob]":{test:3}},"user[email]":null};var e={user:{name:{"pop[bob]":{test:3}},email:null}};var b=qs.parse(c);d.deepEqual(b,e);d.end()});a.test("does not blow up when Buffer global is missing",function(c){var d=global.Buffer;delete global.Buffer;var b=qs.parse("a=b&c=d");global.Buffer=d;c.deepEqual(b,{a:"b",c:"d"});c.end()});a.test("does not crash when parsing circular references",function(d){var b={};b.b=b;var c;d.doesNotThrow(function(){c=qs.parse({"foo[bar]":"baz","foo[baz]":b})});d.equal("foo" in c,true,'parsed has "foo" property');d.equal("bar" in c.foo,true);d.equal("baz" in c.foo,true);d.equal(c.foo.bar,"baz");d.deepEqual(c.foo.baz,b);d.end()});a.test("does not crash when parsing deep objects",function(c){var b;var g="foo";for(var d=0;d<5000;d++){g+="[p]"}g+="=bar";c.doesNotThrow(function(){b=qs.parse(g,{depth:5000})});c.equal("foo" in b,true,'parsed has "foo" property');var f=0;var e=b.foo;while((e=e.p)){f+=1}c.equal(f,5000,"parsed is 5000 properties deep");c.end()});a.test("parses null objects correctly",{skip:!Object.create},function(d){var c=Object.create(null);c.b="c";d.deepEqual(qs.parse(c),{b:"c"});var b=qs.parse({a:c});d.equal("a" in b,true,'result has "a" property');d.deepEqual(b.a,c);d.end()});a.test("parses dates correctly",function(c){var b=new Date();c.deepEqual(qs.parse({a:b}),{a:b});c.end()});a.test("parses regular expressions correctly",function(b){var c=/^test$/;b.deepEqual(qs.parse({a:c}),{a:c});b.end()});a.test("does not allow overwriting prototype properties",function(b){b.deepEqual(qs.parse("a[hasOwnProperty]=b",{allowPrototypes:false}),{});b.deepEqual(qs.parse("hasOwnProperty=b",{allowPrototypes:false}),{});b.deepEqual(qs.parse("toString",{allowPrototypes:false}),{},'bare "toString" results in {}');b.end()});a.test("can allow overwriting prototype properties",function(b){b.deepEqual(qs.parse("a[hasOwnProperty]=b",{allowPrototypes:true}),{a:{hasOwnProperty:"b"}});b.deepEqual(qs.parse("hasOwnProperty=b",{allowPrototypes:true}),{hasOwnProperty:"b"});b.deepEqual(qs.parse("toString",{allowPrototypes:true}),{toString:""},'bare "toString" results in { toString: "" }');b.end()});a.test("params starting with a closing bracket",function(b){b.deepEqual(qs.parse("]=toString"),{"]":"toString"});b.deepEqual(qs.parse("]]=toString"),{"]]":"toString"});b.deepEqual(qs.parse("]hello]=toString"),{"]hello]":"toString"});b.end()});a.test("params starting with a starting bracket",function(b){b.deepEqual(qs.parse("[=toString"),{"[":"toString"});b.deepEqual(qs.parse("[[=toString"),{"[[":"toString"});b.deepEqual(qs.parse("[hello[=toString"),{"[hello[":"toString"});b.end()});a.test("add keys to objects",function(b){b.deepEqual(qs.parse("a[b]=c&a=d"),{a:{b:"c",d:true}},"can add keys to objects");b.deepEqual(qs.parse("a[b]=c&a=toString"),{a:{b:"c"}},"can not overwrite prototype");b.deepEqual(qs.parse("a[b]=c&a=toString",{allowPrototypes:true}),{a:{b:"c",toString:true}},"can overwrite prototype with allowPrototypes true");b.deepEqual(qs.parse("a[b]=c&a=toString",{plainObjects:true}),{a:{b:"c",toString:true}},"can overwrite prototype with plainObjects true");b.end()});a.test("can return null objects",{skip:!Object.create},function(b){var d=Object.create(null);d.a=Object.create(null);d.a.b="c";d.a.hasOwnProperty="d";b.deepEqual(qs.parse("a[b]=c&a[hasOwnProperty]=d",{plainObjects:true}),d);b.deepEqual(qs.parse(null,{plainObjects:true}),Object.create(null));var c=Object.create(null);c.a=Object.create(null);c.a[0]="b";c.a.c="d";b.deepEqual(qs.parse("a[]=b&a[c]=d",{plainObjects:true}),c);b.end()});a.test("can parse with custom encoding",function(b){b.deepEqual(qs.parse("%8c%a7=%91%e5%8d%e3%95%7b",{decoder:function(f){var d=/%([0-9A-F]{2})/ig;var c=[];var e=d.exec(f);while(e){c.push(parseInt(e[1],16));e=d.exec(f)}return iconv.decode(new Buffer(c),"shift_jis").toString()}}),{県:"大阪府"});b.end()});a.test("receives the default decoder as a second argument",function(b){b.plan(1);qs.parse("a",{decoder:function(d,c){b.equal(c,utils.decode)}});b.end()});a.test("throws error with wrong decoder",function(b){b["throws"](function(){qs.parse({},{decoder:"string"})},new TypeError("Decoder has to be a function."));b.end()});a.test("does not mutate the options argument",function(c){var b={};qs.parse("a[b]=true",b);c.deepEqual(b,{});c.end()});a.end()});