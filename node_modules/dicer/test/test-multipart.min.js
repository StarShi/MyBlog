var Dicer=require("..");var assert=require("assert"),fs=require("fs"),path=require("path"),inspect=require("util").inspect;var FIXTURES_ROOT=__dirname+"/fixtures/";var t=0,group=path.basename(__filename,".js")+"/";var tests=[{source:"nested",opts:{boundary:"AaB03x"},chsize:32,nparts:2,what:"One nested multipart"},{source:"many",opts:{boundary:"----WebKitFormBoundaryWLHCs9qmcJJoyjKR"},chsize:16,nparts:7,what:"Many parts"},{source:"many-wrongboundary",opts:{boundary:"LOLOLOL"},chsize:8,nparts:0,dicerError:true,what:"Many parts, wrong boundary"},{source:"many-noend",opts:{boundary:"----WebKitFormBoundaryWLHCs9qmcJJoyjKR"},chsize:16,nparts:7,npartErrors:1,dicerError:true,what:"Many parts, end boundary missing, 1 file open"},{source:"nested-full",opts:{boundary:"AaB03x",headerFirst:true},chsize:32,nparts:2,what:"One nested multipart with preceding header"},{source:"nested-full",opts:{headerFirst:true},chsize:32,nparts:2,setBoundary:"AaB03x",what:"One nested multipart with preceding header, using setBoundary"}];function next(){if(t===tests.length){return}var i=tests[t],h=FIXTURES_ROOT+i.source,b=0,e=new Buffer(i.chsize),a={parts:[],preamble:undefined};var c=new Dicer(i.opts),g,d=0,f=0;c.on("preamble",function(k){var j={body:undefined,bodylen:0,error:undefined,header:undefined};k.on("header",function(l){j.header=l;if(i.setBoundary){c.setBoundary(i.setBoundary)}}).on("data",function(l){var m=new Buffer(l.length);l.copy(m);l=m;if(!j.body){j.body=[l]}else{j.body.push(l)}j.bodylen+=l.length}).on("error",function(l){j.error=l}).on("end",function(){if(j.body){j.body=Buffer.concat(j.body,j.bodylen)}if(j.body||j.header){a.preamble=j}})});c.on("part",function(k){var j={body:undefined,bodylen:0,error:undefined,header:undefined};k.on("header",function(l){j.header=l}).on("data",function(l){if(!j.body){j.body=[l]}else{j.body.push(l)}j.bodylen+=l.length}).on("error",function(l){j.error=l;++d}).on("end",function(){if(j.body){j.body=Buffer.concat(j.body,j.bodylen)}a.parts.push(j)})}).on("error",function(j){g=j}).on("finish",function(){assert(f++===0,makeMsg(i.what,"finish emitted multiple times"));if(i.dicerError){assert(g!==undefined,makeMsg(i.what,"Expected error"))}else{assert(g===undefined,makeMsg(i.what,"Unexpected error: "+g))}var m;if(fs.existsSync(h+"/preamble")){var o=fs.readFileSync(h+"/preamble");if(o.length){m={body:o,bodylen:o.length,error:undefined,header:undefined}}}if(fs.existsSync(h+"/preamble.header")){var k=JSON.parse(fs.readFileSync(h+"/preamble.header","binary"));if(!m){m={body:undefined,bodylen:0,error:undefined,header:k}}else{m.header=k}}if(fs.existsSync(h+"/preamble.error")){var n=new Error(fs.readFileSync(h+"/preamble.error","binary"));if(!m){m={body:undefined,bodylen:0,error:n,header:undefined}}else{m.error=n}}assert.deepEqual(a.preamble,m,makeMsg(i.what,"Preamble mismatch:\nActual:"+inspect(a.preamble)+"\nExpected: "+inspect(m)));assert.equal(a.parts.length,i.nparts,makeMsg(i.what,"Part count mismatch:\nActual: "+a.parts.length+"\nExpected: "+i.nparts));if(!i.npartErrors){i.npartErrors=0}assert.equal(d,i.npartErrors,makeMsg(i.what,"Part errors mismatch:\nActual: "+d+"\nExpected: "+i.npartErrors));for(var l=0,p,j;l<i.nparts;++l){if(fs.existsSync(h+"/part"+(l+1))){j=fs.readFileSync(h+"/part"+(l+1));if(j.length===0){j=undefined}}else{j=undefined}assert.deepEqual(a.parts[l].body,j,makeMsg(i.what,"Part #"+(l+1)+" body mismatch"));if(fs.existsSync(h+"/part"+(l+1)+".header")){p=fs.readFileSync(h+"/part"+(l+1)+".header","binary");p=JSON.parse(p)}else{p=undefined}assert.deepEqual(a.parts[l].header,p,makeMsg(i.what,"Part #"+(l+1)+" parsed header mismatch:\nActual: "+inspect(a.parts[l].header)+"\nExpected: "+inspect(p)))}++t;next()});fs.createReadStream(h+"/original").pipe(c)}next();function makeMsg(a,b){return"["+group+a+"]: "+b}process.on("exit",function(){assert(t===tests.length,makeMsg("_exit","Only ran "+t+"/"+tests.length+" tests"))});