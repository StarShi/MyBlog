var assert=require("assert");var ourProcess=require("./browser");describe("test against our process",function(){test(ourProcess)});if(!process.browser){describe("test against node",function(){test(process)});vmtest()}function test(a){describe("test arguments",function(){it("works",function(c){var b=0;a.nextTick(function(d){assert.equal(d,b++,"first one works");a.nextTick(function(e){assert.equal(e,b++,"recursive one is 4th")},3)},0);a.nextTick(function(d){assert.equal(d,b++,"second one starts");a.nextTick(function(e){assert.equal(e,b++,"this is third");a.nextTick(function(f){assert.equal(f,b++,"this is last");c()},5)},4)},1);a.nextTick(function(d){assert.equal(d,b++,"3rd schedualed happens after the error")},2)})});if(!process.browser){describe("test errors",function(b){it("works",function(d){var c=0;process.removeAllListeners("uncaughtException");process.once("uncaughtException",function(e){assert.equal(2,c++,"error is third");a.nextTick(function(){assert.equal(5,c++,"schedualed in error is last");d()})});a.nextTick(function(){assert.equal(0,c++,"first one works");a.nextTick(function(){assert.equal(4,c++,"recursive one is 4th")})});a.nextTick(function(){assert.equal(1,c++,"second one starts");throw (new Error("an error is thrown"))});a.nextTick(function(){assert.equal(3,c++,"3rd schedualed happens after the error")})})})}describe("rename globals",function(b){var c=setTimeout;var d=clearTimeout;it("clearTimeout",function(f){var g=true;clearTimeout=function(){g=false};var e=false;function h(){clearTimeout=d;var i;try{assert.ok(g,"fake clearTimeout ran");assert.ok(e,"should have run")}catch(j){i=j}f(i)}setTimeout(h,1000);a.nextTick(function(){e=true})});it("just setTimeout",function(e){setTimeout=function(){setTimeout=c;try{assert.ok(false,"fake setTimeout called")}catch(f){e(f)}};a.nextTick(function(){setTimeout=c;e()})})})}function vmtest(){var b=require("vm");var a=require("fs");var c=a.readFileSync("./browser.js",{encoding:"utf8"});describe("should work in vm in strict mode with no globals",function(){it("should parse",function(d){var g='"use strict";var module = {exports:{}};';g+=c;g+="this.works = process.browser;";var e=new b.Script(g);var f={works:false};e.runInNewContext(f);assert.ok(f.works);d()});it("setTimeout throws error",function(d){var g='"use strict";var module = {exports:{}};';g+=c;g+="try {process.nextTick(function () {})} catch (e){this.works = e;}";var e=new b.Script(g);var f={works:false};e.runInNewContext(f);assert.ok(f.works);d()});it("should generally work",function(d){var g='"use strict";var module = {exports:{}};';g+=c;g+="process.nextTick(function () {assert.ok(true);done();})";var e=new b.Script(g);var f={clearTimeout:clearTimeout,setTimeout:setTimeout,done:d,assert:assert};e.runInNewContext(f)});it("late defs setTimeout",function(d){var g='"use strict";var module = {exports:{}};';g+=c;g+="var setTimeout = hiddenSetTimeout;process.nextTick(function () {assert.ok(true);done();})";var e=new b.Script(g);var f={clearTimeout:clearTimeout,hiddenSetTimeout:setTimeout,done:d,assert:assert};e.runInNewContext(f)});it("late defs clearTimeout",function(d){var g='"use strict";var module = {exports:{}};';g+=c;g+="var clearTimeout = hiddenClearTimeout;process.nextTick(function () {assert.ok(true);done();})";var e=new b.Script(g);var f={hiddenClearTimeout:clearTimeout,setTimeout:setTimeout,done:d,assert:assert};e.runInNewContext(f)});it("late defs setTimeout and then redefine",function(d){var g='"use strict";var module = {exports:{}};';g+=c;g+='var setTimeout = hiddenSetTimeout;process.nextTick(function () {setTimeout = function (){throw new Error("foo")};hiddenSetTimeout(function(){process.nextTick(function (){assert.ok(true);done();});});});';var e=new b.Script(g);var f={clearTimeout:clearTimeout,hiddenSetTimeout:setTimeout,done:d,assert:assert};e.runInNewContext(f)})})};